#include <array>
#include <cstddef>
#include <cstdint>
#include <span>


class single_input
{
public:
	static constexpr std::uint_fast8_t INPUT_SIZE = 1;
	static constexpr std::size_t OUTPUT_SIZE = 4;
	using array_input_t = std::array<bool, INPUT_SIZE>;
	using array_output_t = std::array<bool, OUTPUT_SIZE>;
	class input_t : public array_input_t
	{
	public:
		[[nodiscard]] bool& the_only_input() { return (*this)[0]; }
	};
	class output_t : public array_output_t
	{
	public:
		[[nodiscard]] bool& true() { return (*this)[0]; }
		[[nodiscard]] bool& pass_though() { return (*this)[1]; }
		[[nodiscard]] bool& negate() { return (*this)[2]; }
		[[nodiscard]] bool& false() { return (*this)[3]; }
	};
	
	[[nodiscard]] constexpr output_t operator()(const bool the_only_input) const { return (*this)(array_input_t{the_only_input}); }
	[[nodiscard]] constexpr output_t operator()(const std::span<const bool, INPUT_SIZE> i) const { return calc(i); }
	
	[[nodiscard]] static constexpr output_t calc(const bool the_only_input) { return calc(array_input_t{the_only_input}); }
	[[nodiscard]] static constexpr output_t calc(const std::span<const bool, INPUT_SIZE> i);
};

constexpr single_input::output_t single_input::calc(const std::span<const bool, INPUT_SIZE> i)
{
	// Results
	output_t o = {};
	o[0] = true;
	o[1] = i[0];
	o[2] = !i[0];
	o[3] = false;
	return o;
}
