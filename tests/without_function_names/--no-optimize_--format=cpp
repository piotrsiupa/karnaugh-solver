#include <array>
#include <cstddef>
#include <cstdint>
#include <span>


class without_function_names
{
public:
	static constexpr std::uint_fast8_t INPUT_SIZE = 4;
	static constexpr std::size_t OUTPUT_SIZE = 2;
	using array_input_t = std::array<bool, INPUT_SIZE>;
	using array_output_t = std::array<bool, OUTPUT_SIZE>;
	class input_t : public array_input_t
	{
	public:
		[[nodiscard]] bool& a() { return (*this)[0]; }
		[[nodiscard]] bool& b() { return (*this)[1]; }
		[[nodiscard]] bool& c() { return (*this)[2]; }
		[[nodiscard]] bool& d() { return (*this)[3]; }
	};
	class output_t : public array_output_t
	{
	};
	
	[[nodiscard]] constexpr output_t operator()(const bool a, const bool b, const bool c, const bool d) const { return (*this)(array_input_t{a, b, c, d}); }
	[[nodiscard]] constexpr output_t operator()(const std::span<const bool, INPUT_SIZE> i) const { return calc(i); }
	
	[[nodiscard]] static constexpr output_t calc(const bool a, const bool b, const bool c, const bool d) { return calc(array_input_t{a, b, c, d}); }
	[[nodiscard]] static constexpr output_t calc(const std::span<const bool, INPUT_SIZE> i);
};

constexpr without_function_names::output_t without_function_names::calc(const std::span<const bool, INPUT_SIZE> i)
{
	output_t o = {};
	o[0] = !i[0] && i[3];
	o[1] = !i[0] && !i[1] && i[2];
	return o;
}
