#include <array>

class without_function_names
{
public:
	using input_t = struct { bool a, b, c, d; };
	using output_t = std::array<bool, 2>;
	
	[[nodiscard]] constexpr output_t operator()(const bool a, const bool b, const bool c, const bool d) const { return (*this)({a, b, c, d}); }
	[[nodiscard]] constexpr output_t operator()(const input_t &i) const { return calc(i); }
	
	[[nodiscard]] static constexpr output_t calc(const bool a, const bool b, const bool c, const bool d) { return calc({a, b, c, d}); }
	[[nodiscard]] static constexpr output_t calc(const input_t &i);
};

constexpr without_function_names::output_t without_function_names::calc(const input_t &i)
{
	// Intermediary values
	bool prods[2] = {};
	
	// Products
	prods[0] = !i.a && !i.b;
	prods[1] = i.c && prods[0];
	
	// Results
	output_t o = {};
	o[0] = prods[0];
	o[1] = prods[1];
	return o;
}
